import { Vec2 } from "./vec2.js";
import { HEIGHT, WIDTH } from "./view.js";

export enum AsteroidSize {
    Small = 2,
    Medium = 5,
    Large = 8
}

// asteroid co-ordinates generated by Claude.
export const ASTEROID_SHAPES = [
    // Shape 1: Large angular asteroid with natural rock formation
    [
        [-5.13, -0.91],
        [-3, 0],
        [-4.7, 1.29],
        [-2.22, 4],
        [2.13, 4],
        [4.8, 1.3],
        [4.74, -0.91],
        [2.68, -3.788],
        [0.131, -4.0],
        [-0.314, -1.33],
        [-2.49, -3.72],
    ],

    // Shape 2: Asymmetric with sharp protrusions
    [
        [-4.82, -1.44],
        [-2.91, 0.32],
        [-4.31, 2.1],
        [-1.93, 3.67],
        [1.88, 3.21],
        [4.12, 1.67],
        [3.94, -1.13],
        [2.14, -3.92],
        [-0.43, -4.21],
        [-1.12, -1.89],
        [-3.21, -3.44],
    ],

    // Shape 3: Irregular formation with deep cuts
    [
        [-4.92, -1.12],
        [-3.41, 0.89],
        [-4.23, 2.31],
        [-1.82, 3.91],
        [2.42, 3.44],
        [4.31, 0.91],
        [3.89, -1.67],
        [1.92, -3.44],
        [-0.67, -3.91],
        [-1.23, -1.67],
        [-2.89, -3.21],
    ]
];


export class Asteroid {
    constructor(
        public pos: Vec2,
        public velocity: Vec2,
        public size: AsteroidSize,
        public type: number
    ) { }

    update(dt: number) {
        this.pos = this.pos.add(this.velocity.scale(dt));

        //wrap around
        this.pos.x = ((this.pos.x % WIDTH) + WIDTH) % WIDTH;
        this.pos.y = ((this.pos.y % HEIGHT) + HEIGHT) % HEIGHT;

    }

    draw(ctx: CanvasRenderingContext2D) {

        const points = ASTEROID_SHAPES[this.type].map(([x, y]) => new Vec2(x, y).scale(this.size));

        ctx.save(); // save old state so that we don't polute the ctx

        ctx.translate(this.pos.x, this.pos.y);
        ctx.strokeStyle = "white";
        // draw asteroid 
        ctx.beginPath();

        const tip = points[0];
        ctx.moveTo(tip.x, tip.y);
        for (let i = 1; i < points.length; i++) {
            ctx.lineTo(points[i].x, points[i].y);
        }

        ctx.closePath();
        ctx.stroke();
        ctx.restore();

    }
}